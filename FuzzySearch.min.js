/* Copyright 2020 by Jon Michael Galindo | Use of this source code is governed by a MIT-style license that can be found in the license file or at https://opensource.org/licenses/MIT. */
const FuzzySearch=function(e={}){if("SCORE_WIDTH_BYTES"in e){if(2!==e.SCORE_WIDTH_BYTES&&4!==e.SCORE_WIDTH_BYTES)throw console.error("FuzzySearch( options ) options.SCORE_WIDTH_BYTES must be integer: 2 or 4."),"Instantiation Error"}else e.SCORE_WIDTH_BYTES=2;if("DATA_WIDTH_BYTES"in e){if(2!==e.DATA_WIDTH_BYTES&&4!==e.DATA_WIDTH_BYTES)throw console.error("FuzzySearch( options ) options.DATA_WIDTH_BYTES must be integer: 2 or 4."),"Instantiation Error"}else e.DATA_WIDTH_BYTES=2;if("FORCE_SINGLE_THREAD"in e){if(!0!==e.FORCE_SINGLE_THREAD&&!1!==e.FORCE_SINGLE_THREAD)throw console.error("FuzzySearch( options ) options.DATA_WIDTH_BYTES must be boolean: true or false."),"Instantiation Error"}else e.FORCE_SINGLE_THREAD=!1;if("FUZZY_RESOLUTION"in e){if("number"!=typeof e.FUZZY_RESOLUTION)throw console.error("FuzzySearch( options ) options.FUZZY_RESOLUTION must be a number."),"Instantiation Error";if(parseInt(e.FUZZY_RESOLUTION)!==e.FUZZY_RESOLUTION)throw console.error("FuzzySearch( options ) options.DATA_WIDTH_BYTES must be an integer. It was: ",e.FUZZY_RESOLUTION),"Instantiation Error";if(e.FUZZY_RESOLUTION<=0)throw console.error("FuzzySearch( options ) options.DATA_WIDTH_BYTES must be greater than 0. It was: ",e.FUZZY_RESOLUTION),"Instantiation Error"}else e.FUZZY_RESOLUTION=200;const r={},t={1:Uint8Array,2:Uint16Array,4:Uint32Array},o=["Elements Count","Fields Count"],n=2,a=o.length*n,s=e.SCORE_WIDTH_BYTES,l=["Perfect Match","Full Match","Fuzzy Match"],c=0,i=1,f=2,u=l.length,y=e.DATA_WIDTH_BYTES,h=e.FORCE_SINGLE_THREAD,z=e.FUZZY_RESOLUTION;let d=null,g=null,S=null,T=null,p=!1,E=!1,I=!1,b=!1;const w=(e,r)=>'FuzzySearch.init( data:<array[<string>|<object{*:<string>}>,...]>, keys:<array[<string>,...]>, copy:<unset>|"direct"|"ascii-words"|"ascii-code", fast:<unset>|<boolean>, '+`) - type ${e} did not match ${r}`;function _(e){if(!0===E)throw console.error("FuzzySearch.getResults( limit ) called while search in progress.\n","Call: await FuzzySearch.search( target ) to avoid this block."),"Thread Lock Error";if(!1===p){if(null===d)throw console.error("FuzzySearch.getResults( limit ) called before initializing search tables.\nCall FuzzySearch.init( keys, data ). Then call FuzzySearch.search( target ). Then call FuzzySearch.getScore( index ) or FuzzySearch.getResults( limit )."),"Initialization Error";if(!1===I)throw console.error("FuzzySearch.getResults( limit ) called before performing a search.\nCall FuzzySearch.search( target ). Then call FuzzySearch.getScore( index ) or FuzzySearch.getResults( limit )."),"Initialization Error"}const r={},t={};if(b)r.perfect=[],r.full=[],r.fuzzy=[],t.perfect={score:1/0,resultIndex:-1,elementIndex:-1},t.full={score:1/0,resultIndex:-1,elementIndex:-1},t.fuzzy={score:1/0,resultIndex:-1,elementIndex:-1};else for(let e of S)r[e]={perfect:[],full:[],fuzzy:[]},t[e]={perfect:{score:1/0,resultIndex:-1,elementIndex:-1},full:{score:1/0,resultIndex:-1,elementIndex:-1},fuzzy:{score:1/0,resultIndex:-1,elementIndex:-1}};const{headerTable:o,scoreTable:n}=d,[a,s]=o;let l=0;for(let o=0;o<a;o++)for(let a=0;a<s;a++){const s=b?null:S[a],y=b?r:r[s],h=b?t:t[s],z=n[l+c],d=n[l+i],g=n[l+f];if(z>0)if(y.perfect.length<e)y.perfect.push({score:z,index:o}),z<h.perfect.score&&(h.perfect.score=z,h.perfect.resultIndex=y.perfect.length-1,h.perfect.elementIndex=o);else if(z<h.perfect.score){const e=h.perfect.resultIndex;y.perfect[e].score=z,y.perfect[e].index=o,h.perfect.score=z,h.perfect.resultIndex=e,h.perfect.elementIndex=o}if(d>0)if(y.full.length<e)y.full.push({score:d,index:o}),d<h.full.score&&(h.full.score=d,h.full.resultIndex=y.full.length-1,h.full.elementIndex=o);else if(d<h.full.score){const e=h.full.resultIndex;y.full[e].score=d,y.full[e].index=o,h.full.score=d,h.full.resultIndex=e,h.full.elementIndex=o}if(g>0)if(y.fuzzy.length<e)y.fuzzy.push({score:g,index:o}),g<h.fuzzy.score&&(h.fuzzy.score=g,h.fuzzy.resultIndex=y.fuzzy.length-1,h.fuzzy.elementIndex=o);else if(g<h.fuzzy.score){const e=h.fuzzy.resultIndex;y.fuzzy[e].score=g,y.fuzzy[e].index=o,h.fuzzy.score=g,h.fuzzy.resultIndex=e,h.fuzzy.elementIndex=o}l+=u}const y=(e,r)=>r.score!==e.score?r.score-e.score:e.index-r.index;if(b)r.perfect.sort(y),r.full.sort(y),r.fuzzy.sort(y);else for(let e of S){const t=r[e];t.perfect.sort(y),t.full.sort(y),t.fuzzy.sort(y)}return r}function A(e,r){const{headerTable:t,scoreTable:o,dataTable:n}=r,[a,s]=t,l=e.length,y=O(e,T);let h=0,d=0;for(let e=0;e<a;e++)for(let e=0;e<s;e++){const e=n[d];++d,o[h+c]=0,o[h+i]=0,o[h+f]=0;let r=0;for(let t=0;t<l;t++){const a=y[t];let s=0;for(let r=0;r<e;r++){if(a===n[d+r]){o[h+f]+=Math.max(1,parseInt(z/e)),s=1,1===l&&++o[h+c];const a=l-t;for(let s=1;s<a&&r+s<e;s++){if(y[s]!==n[d+r+s])break;{const r=parseInt(z/Math.max(1,e/s));o[h+f]+=r,0===t&&s===a-1&&++o[h+c]}}}}1===s&&++r}let t=parseInt(o[h+f]/l);o[h+f]=t,r===l&&(o[h+i]=1),h+=u,d+=e}}function F(e){const r=o.length,t=a,n=m(e,r),[l,c]=n,i=l*c*u,f=i*s;return{headerTable:n,scoreTable:R(e,t,i),dataTable:x(e,t,f)}}function m(e,r){const o=r;return new(0,t[n])(e,0,o)}function R(e,r,o){const n=r,a=o;return new(0,t[s])(e,n,a)}function x(e,r,o){const n=r+o;return new(0,t[y])(e,n)}function O(e,r){"ascii-words"===r?e=e.replace(/[^\w\d\s]/gm," ").replace(/[\s\r\n\t\v\f]+/gm," ").toLowerCase():"ascii-code"===r&&(e=e.replace(/[\s\r\n\t\v\f]+/gm," ").toLowerCase());const o=e.length,n=new(0,t[y])(o);for(let r=0;r<o;r++)n[r]=e.charCodeAt(r);return n}r.init=function(e,r,l="direct",c=!1){if(!0===E)throw console.error("FuzzySearch.init() called while search in progress.\n","Call: await FuzzySearch.search( target ) or use multiple instances of FuzzySearch to avoid this block."),"Thread Lock Error";if(!1===c){if("direct"!==l&&"ascii-words"!==l&&"ascii-code"!==l)throw console.error(w('<unset>|"direct"|"ascii-words"|"ascii-code"','"copy"')+" because:\n",'"copy" was: ',l),"Type Error";if(!0!==c&&!1!==c)throw console.error(w("<unset>|<boolean>",'"fast"')+" because:\n",'"fast" was: ',c),"Type Error";if(!1===Array.isArray(e))throw console.error(w("<array>",'"data"')+" because:\n",`"data" was type: <${typeof e}>`),"Type Error";let t=!1;if("string"==typeof e[0])b=!0,r=null;else if(r){if(!1===Array.isArray(r))throw console.error(w("<array>",'"keys"')+" because:\n",`"keys" was type: <${typeof r}>`),"Type Error";for(let e=0;e<r.length;e++){const t=r[e];if("string"!=typeof t){const r=Array.isArray(t)?"array":typeof t;throw console.error(w("<array[<string>,...]>",'"keys"')+" because:\n",`"keys[ ${e} ]" was type: <${r}>`),"Type Error"}}}else{r=[];const o=e[0];if("object"!=typeof o||!1!==Array.isArray(o)){const e=Array.isArray(o)?"array":typeof o;throw console.error(w("<array[<string>|<object>,...]>",'"data"')+" because:\n",`"data[ 0 ]" was type: <${e}>`),"Type Error"}{if(Array.isArray(o)){const e=Array.isArray(o)?"array":typeof o;throw console.error(w("<array[<object>,...]>",'"data"')+" because:\n",`"data[ 0 ]" was type: <${e}>`),"Type Error"}const e=Object.keys(o);if(0===e.length)throw console.error('"data[0]" had no keys.'),"Type Error";for(let t of e)"string"==typeof o[t]&&r.push(t);if(0===r.length)throw console.error('The object at "data[0]" contained no searchable strings.'),"Type Error";t=!0}}for(let o=0;o<e.length;o++){const n=e[o];if(b){if("string"!=typeof n){const e=Array.isArray(n)?"array":typeof n;throw console.error(w("<array[<string>,...]>",'"data"')+" because:\n",`"data[ ${o} ]" was type: <${e}>`),"Type Error"}}else{if("object"!=typeof n){const e=Array.isArray(n)?"array":typeof n;throw console.error(w("<array[<object>,...]>",'"data"')+" because:\n",`"data[ ${o} ]" was type: <${e}>`),"Type Error"}for(let e=0;e<r.length;e++){const a=r[e];if(!a in n)throw console.error(w("<array[<object{...[&keys]}>,...]>",'"data"')+" because:\n",`"data[ ${o} ]" was missing key "keys[ ${e} ]": "${a}"`,t?'\n("keys[]" were inferred from "data[0]".)':""),"Type Error";{const e=Array.isArray(n[a])?"array":typeof n[a];if("string"!==e)throw console.error(w("<array[<object{...[&keys]:<string>}>,...]>",'"data"')+" because:\n",`"data[ ${o} ][ "${a}" ]" was type <${e}>`),"Type Error"}}}}}else if(!r){const t=e[0];if("string"==typeof t)b=!0;else{const e=Object.keys(t);r=[];for(let o of e)"string"==typeof t[o]&&r.push(o)}}if(b)S=null;else{S=[];for(let e of r)S.push(e)}T=l,p=c;const{tables:i,buffer:f}=function(e,r,l){r||(r=["dummy-key"]),o.length;const c=a,i=e.length,f=r.length,h=i*f*u*s,z=1*y;let d=0;for(let t of e)for(let e of r){const r=b?t:t[e],o=r.length,n=o*y;d+=n+z}const g=new ArrayBuffer(c+h+d),S=new(0,t[n])(g,0,2);S[0]=i,S[1]=f;const T=F(g),{headerTable:p,scoreTable:E,dataTable:I}=T;let w=0;for(let t of e)for(let e of r){const r=b?t:t[e],o=r.length;if(I[w]=o,w+=1,"direct"===l){for(let e=0;e<r.length;e++)I[w+e]=r.charCodeAt(e);w+=o}else if("ascii-words"===l){let e=0,t=!0;for(let o=0;o<r.length;o++){const n=r.charCodeAt(o);if(n>=65&&n<=90)I[w+o]=n+32,t=!0,++e;else if(n>=97&&n<=122||n>=48&&n<=57)I[w+o]=n,t=!0,++e;else if(!0===t)I[w+o]=32,t=!1,++e;else if(!1===t)continue}I[w-1]=e,w+=e}else if("ascii-code"===l){let e=0,t=!0;for(let o=0;o<r.length;o++){const n=r.charCodeAt(o),a=32===n||n>=9&&n<=13;if(!0===t&&!0===a)I[w+o]=32,t=!1,++e;else if(n>=65&&n<=90)I[w+o]=n+32,t=!0,++e;else if(!1===a)I[w+o]=n,t=!0,++e;else if(!1===t)continue}I[w-1]=e,w+=e}}return{tables:T,buffer:g}}(e,r,l);g=f,d=i,I=!1},r.search=async function(e,r=10){if(!0===E)throw console.error("FuzzySearch.search( target ) called while search in progress.\n","Call: await FuzzySearch.search( target ) to avoid this block."),"Thread Lock Error";return!0===h?(function(e){if(!1===p){if("string"!=typeof e)throw console.error("FuzzySearch.search( target:<string> ) - type <string> did not match target: ",e),"Type Error";if(null===d)throw console.error("FuzzySearch.search( target ) called before initializing search tables.\nCall FuzzySearch.init( keys, data ) before calling FuzzySearch.search( target )."),"Initialization Error"}A(e,d),I=!0}(e),_(r)):(await D(e),_(r))},r.getResults=_,r.getScore=function(e){if(!0===E)throw console.error("FuzzySearch.getScore( index ) called while search in progress.\n","Call: await FuzzySearch.search( target ) to avoid this block."),"Thread Lock Error";if(!1===p){if(null===d)throw console.error("FuzzySearch.getScore( index ) called before initializing search tables.\nCall FuzzySearch.init( keys, data ). Then call FuzzySearch.search( target ). Then call FuzzySearch.getScore( index ) or FuzzySearch.getResults( limit )."),"Initialization Error";if(!1===I)throw console.error("FuzzySearch.getScore( index ) called before performing a search.\nCall FuzzySearch.search( target ). Then call FuzzySearch.getScore( index ) or FuzzySearch.getResults( limit )."),"Initialization Error"}const{headerTable:r,scoreTable:t}=d,[o,n]=r;let a=n*u*e;if(e>o)throw console.error(`FuzzySearch.getScore( index ) called with index: ${e}, but data was initialized with only ${o} searchable elements.`),"Out-of-Bounds Error";{const e=S||["dummy-key"];let r={};for(let o=0;o<e.length;o++){const n=e[o],s={perfect:t[a+c],full:t[a+i],fuzzy:t[a+f]};r[n]=s,a+=u}return b?r["dummy-key"]:r}};let D=null;if(!1===h){const e=(()=>{const e=`const \n                //table views\n                arrayTypeByBytes = {\n                    1: Uint8Array,\n                    2: Uint16Array,\n                    4: Uint32Array\n                },\n            \n                //header structure\n                TABLE_HEADERS = ${JSON.stringify(o)},\n                HEADER_WIDTH_BYTES = ${n},\n                HEADERS_SIZE_BYTES =\n                    TABLE_HEADERS.length *\n                    HEADER_WIDTH_BYTES,\n            \n                //score structure\n                SCORE_WIDTH_BYTES = \n                    ${s},\n                SCORE_KINDS = ${JSON.stringify(l)},\n                    PERFECT_MATCH = ${c},\n                    FULL_MATCH = ${i},\n                    FUZZY_MATCH = ${f},\n                SCORES_PER_FIELD = \n                    SCORE_KINDS.length,\n            \n                //data structure\n                DATA_WIDTH_BYTES = ${y},\n\n                //fuzzy algorithm\n                FUZZY_RESOLUTION = ${z};\n                \n                let COPY = null;\n        \n                onmessage = message => {\n                    COPY = message.data.copy;\n                    const {\n                            target,\n                            buffer\n                        } = message.data,\n                        tables = \n                            createTableViewsFromBuffer( buffer );\n                    \n                    computeSearchScores(\n                        target,\n                        tables\n                    );\n        \n                    self.postMessage(\n                        { buffer },\n                        [ buffer ]\n                    )\n                }\n        \n                ${A.toLocaleString()}\n        \n                ${F.toLocaleString()}\n        \n                ${m.toLocaleString()}\n        \n                ${R.toLocaleString()}\n        \n                ${x.toLocaleString()}\n\n                ${O.toLocaleString()}\n                `,r=new Blob([e],{type:"text/javascript"}),t=URL.createObjectURL(r),a=new Worker(t);return URL.revokeObjectURL(t),a})();D=function(r){return E=!0,new Promise(t=>{e.onmessage=(e=>{g=e.data.buffer,d=F(g),E=!1,I=!0,t()}),e.postMessage({target:r,buffer:g},[g])})}}return r};